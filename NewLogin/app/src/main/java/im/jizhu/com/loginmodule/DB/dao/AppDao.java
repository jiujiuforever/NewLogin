package im.jizhu.com.loginmodule.DB.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import im.jizhu.com.loginmodule.DB.entity.AppEntity;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table appinfo.
 */
public class AppDao extends AbstractDao<AppEntity, String> {

    public static final String TABLENAME = "appinfo";

    /**
     * Properties of entity AppEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AppID = new Property(0, String.class, "appID", true, "APP_ID");
        public final static Property IconUrl = new Property(1, String.class, "iconUrl", false, "ICON_URL");
        public final static Property ZipUrl = new Property(2, String.class, "zipUrl", false, "ZIP_URL");
        public final static Property AppVen = new Property(3, Double.class, "appVen", false, "APP_VEN");
        public final static Property AppName = new Property(4, String.class, "appName", false, "APP_NAME");
        public final static Property IsDownloaded = new Property(5, Boolean.class, "isDownloaded", false, "IS_DOWNLOADED");
        public final static Property LocalSplash = new Property(6, String.class, "localSplash", false, "LOCAL_SPLASH");
    };


    public AppDao(DaoConfig config) {
        super(config);
    }

    public AppDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'appinfo' (" + //
                "'APP_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: appID
                "'ICON_URL' TEXT," + // 1: iconUrl
                "'ZIP_URL' TEXT," + // 2: zipUrl
                "'APP_VEN' REAL," + // 3: appVen
                "'APP_NAME' TEXT," + // 4: appName
                "'IS_DOWNLOADED' INTEGER," + // 5: isDownloaded
                "'LOCAL_SPLASH' TEXT);"); // 6: localSplash
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'appinfo'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AppEntity entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getAppID());

        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(2, iconUrl);
        }

        String zipUrl = entity.getZipUrl();
        if (zipUrl != null) {
            stmt.bindString(3, zipUrl);
        }

        Double appVen = entity.getAppVen();
        if (appVen != null) {
            stmt.bindDouble(4, appVen);
        }

        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(5, appName);
        }

        Boolean isDownloaded = entity.getIsDownloaded();
        if (isDownloaded != null) {
            stmt.bindLong(6, isDownloaded ? 1l: 0l);
        }

        String localSplash = entity.getLocalSplash();
        if (localSplash != null) {
            stmt.bindString(7, localSplash);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public AppEntity readEntity(Cursor cursor, int offset) {
        AppEntity entity = new AppEntity( //
                cursor.getString(offset + 0), // appID
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // iconUrl
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // zipUrl
                cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // appVen
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // appName
                cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // isDownloaded
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // localSplash
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AppEntity entity, int offset) {
        entity.setAppID(cursor.getString(offset + 0));
        entity.setIconUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setZipUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAppVen(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setAppName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsDownloaded(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setLocalSplash(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
    }

    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(AppEntity entity, long rowId) {
        return entity.getAppID();
    }

    /** @inheritdoc */
    @Override
    public String getKey(AppEntity entity) {
        if(entity != null) {
            return entity.getAppID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
