package im.jizhu.com.loginmodule.DB.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import im.jizhu.com.loginmodule.DB.entity.AccountEntity;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table Account.
*/
public class AccountDao extends AbstractDao<AccountEntity, Long> {

    public static final String TABLENAME = "Account";

    /**
     * Properties of entity AccountEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Account_id = new Property(0, Long.class, "account_id", true, "ACCOUNT_ID");
        public final static Property Id = new Property(1, int.class, "id", false, "ID");
        public final static Property Userid = new Property(2, int.class, "userid", false, "USERID");
        public final static Property Type = new Property(3, int.class, "type", false, "TYPE");
        public final static Property Value = new Property(4, String.class, "value", false, "VALUE");
        public final static Property Account_text1 = new Property(5, String.class, "account_text1", false, "ACCOUNT_TEXT1");
        public final static Property Account_text2 = new Property(6, String.class, "account_text2", false, "ACCOUNT_TEXT2");
        public final static Property Account_text3 = new Property(7, String.class, "account_text3", false, "ACCOUNT_TEXT3");
        public final static Property Status = new Property(8, String.class, "status", false, "STATUS");
    };


    public AccountDao(DaoConfig config) {
        super(config);
    }
    
    public AccountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Account' (" + //
                "'ACCOUNT_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: account_id
                "'ID' INTEGER NOT NULL ," + // 1: id
                "'USERID' INTEGER NOT NULL ," + // 2: userid
                "'TYPE' INTEGER NOT NULL ," + // 3: type
                "'VALUE' TEXT NOT NULL ," + // 4: value
                "'ACCOUNT_TEXT1' TEXT NOT NULL ," + // 5: account_text1
                "'ACCOUNT_TEXT2' TEXT NOT NULL ," + // 6: account_text2
                "'ACCOUNT_TEXT3' TEXT NOT NULL ," + // 7: account_text3
                "'STATUS' TEXT NOT NULL );"); // 8: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Account'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AccountEntity entity) {
        stmt.clearBindings();
 
        Long account_id = entity.getAccount_id();
        if (account_id != null) {
            stmt.bindLong(1, account_id);
        }
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getUserid());
        stmt.bindLong(4, entity.getType());
        stmt.bindString(5, entity.getValue());
        stmt.bindString(6, entity.getAccount_text1());
        stmt.bindString(7, entity.getAccount_text2());
        stmt.bindString(8, entity.getAccount_text3());
        stmt.bindString(9, entity.getStatus());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AccountEntity readEntity(Cursor cursor, int offset) {
        AccountEntity entity = new AccountEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // account_id
            cursor.getInt(offset + 1), // id
            cursor.getInt(offset + 2), // userid
            cursor.getInt(offset + 3), // type
            cursor.getString(offset + 4), // value
            cursor.getString(offset + 5), // account_text1
            cursor.getString(offset + 6), // account_text2
            cursor.getString(offset + 7), // account_text3
            cursor.getString(offset + 8) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AccountEntity entity, int offset) {
        entity.setAccount_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getInt(offset + 1));
        entity.setUserid(cursor.getInt(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setValue(cursor.getString(offset + 4));
        entity.setAccount_text1(cursor.getString(offset + 5));
        entity.setAccount_text2(cursor.getString(offset + 6));
        entity.setAccount_text3(cursor.getString(offset + 7));
        entity.setStatus(cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AccountEntity entity, long rowId) {
        entity.setAccount_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AccountEntity entity) {
        if(entity != null) {
            return entity.getAccount_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
