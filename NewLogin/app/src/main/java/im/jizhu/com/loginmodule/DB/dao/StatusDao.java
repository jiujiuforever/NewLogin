package im.jizhu.com.loginmodule.DB.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import im.jizhu.com.loginmodule.DB.entity.StatusEntity;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table Status.
*/
public class StatusDao extends AbstractDao<StatusEntity, Void> {

    public static final String TABLENAME = "Status";

    /**
     * Properties of entity StatusEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Status_id = new Property(0, Long.class, "status_id", true, "STATUS_ID");
        public final static Property Id = new Property(1, String.class, "id", true, "ID");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property Updated = new Property(3, int.class, "updated", false, "UPDATED");
        public final static Property Status = new Property(4, int.class, "status", false, "STATUS");
        public final static Property Status_text1 = new Property(5, String.class, "status_text1", false, "STATUS_TEXT1");
        public final static Property Status_text2 = new Property(6, String.class, "status_text2", false, "STATUS_TEXT2");
        public final static Property Status_text3 = new Property(7, String.class, "status_text3", false, "STATUS_TEXT3");
    };


    public StatusDao(DaoConfig config) {
        super(config);
    }
    
    public StatusDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Status' (" + //
                "'STATUS_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: status_id
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 1: id
                "'TYPE' INTEGER NOT NULL ," + // 2: type
                "'UPDATED' INTEGER NOT NULL ," + // 3: updated
                "'STATUS' INTEGER NOT NULL ," + // 4: status
                "'STATUS_TEXT1' TEXT NOT NULL ," + // 5: status_text1
                "'STATUS_TEXT2' TEXT NOT NULL ," + // 6: status_text2
                "'STATUS_TEXT3' TEXT NOT NULL );"); // 7: status_text3
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Status'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, StatusEntity entity) {
        stmt.clearBindings();
 
        Long status_id = entity.getStatus_id();
        if (status_id != null) {
            stmt.bindLong(1, status_id);
        }
        stmt.bindString(2, entity.getId());
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getUpdated());
        stmt.bindLong(5, entity.getStatus());
        stmt.bindString(6, entity.getStatus_text1());
        stmt.bindString(7, entity.getStatus_text2());
        stmt.bindString(8, entity.getStatus_text3());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public StatusEntity readEntity(Cursor cursor, int offset) {
        StatusEntity entity = new StatusEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // status_id
            cursor.getString(offset + 1), // id
            cursor.getInt(offset + 2), // type
            cursor.getInt(offset + 3), // updated
            cursor.getInt(offset + 4), // status
            cursor.getString(offset + 5), // status_text1
            cursor.getString(offset + 6), // status_text2
            cursor.getString(offset + 7) // status_text3
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, StatusEntity entity, int offset) {
        entity.setStatus_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getString(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setUpdated(cursor.getInt(offset + 3));
        entity.setStatus(cursor.getInt(offset + 4));
        entity.setStatus_text1(cursor.getString(offset + 5));
        entity.setStatus_text2(cursor.getString(offset + 6));
        entity.setStatus_text3(cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(StatusEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(StatusEntity entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
