package im.jizhu.com.loginmodule.DB.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import im.jizhu.com.loginmodule.DB.entity.UserNameEntity;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table UserName.
*/
public class UserNameDao extends AbstractDao<UserNameEntity, Void> {

    public static final String TABLENAME = "UserName";

    /**
     * Properties of entity UserNameEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Username_id = new Property(0, Long.class, "username_id", true, "USERNAME_ID");
        public final static Property Id = new Property(1, int.class, "id", true, "ID");
        public final static Property Value = new Property(2, String.class, "value", false, "VALUE");
        public final static Property English_name = new Property(3, String.class, "english_name", false, "ENGLISH_NAME");
        public final static Property Nick = new Property(4, String.class, "nick", false, "NICK");
        public final static Property Word_name = new Property(5, String.class, "word_name", false, "WORD_NAME");
        public final static Property Number_name = new Property(6, String.class, "number_name", false, "NUMBER_NAME");
        public final static Property Net_name = new Property(7, String.class, "net_name", false, "NET_NAME");
        public final static Property Pinying_name = new Property(8, String.class, "pinying_name", false, "PINYING_NAME");
        public final static Property Pinying_first_name = new Property(9, String.class, "pinying_first_name", false, "PINYING_FIRST_NAME");
        public final static Property Pinying_nick = new Property(10, String.class, "pinying_nick", false, "PINYING_NICK");
        public final static Property Username_text1 = new Property(11, String.class, "username_text1", false, "USERNAME_TEXT1");
        public final static Property Username_text2 = new Property(12, String.class, "username_text2", false, "USERNAME_TEXT2");
        public final static Property Status = new Property(13, String.class, "status", false, "STATUS");
    };


    public UserNameDao(DaoConfig config) {
        super(config);
    }
    
    public UserNameDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'UserName' (" + //
                "'USERNAME_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: username_id
                "'ID' INTEGER PRIMARY KEY NOT NULL ," + // 1: id
                "'VALUE' TEXT NOT NULL ," + // 2: value
                "'ENGLISH_NAME' TEXT NOT NULL ," + // 3: english_name
                "'NICK' TEXT NOT NULL ," + // 4: nick
                "'WORD_NAME' TEXT NOT NULL ," + // 5: word_name
                "'NUMBER_NAME' TEXT NOT NULL ," + // 6: number_name
                "'NET_NAME' TEXT NOT NULL ," + // 7: net_name
                "'PINYING_NAME' TEXT NOT NULL ," + // 8: pinying_name
                "'PINYING_FIRST_NAME' TEXT NOT NULL ," + // 9: pinying_first_name
                "'PINYING_NICK' TEXT NOT NULL ," + // 10: pinying_nick
                "'USERNAME_TEXT1' TEXT NOT NULL ," + // 11: username_text1
                "'USERNAME_TEXT2' TEXT NOT NULL ," + // 12: username_text2
                "'STATUS' TEXT NOT NULL );"); // 13: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'UserName'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserNameEntity entity) {
        stmt.clearBindings();
 
        Long username_id = entity.getUsername_id();
        if (username_id != null) {
            stmt.bindLong(1, username_id);
        }
        stmt.bindLong(2, entity.getId());
        stmt.bindString(3, entity.getValue());
        stmt.bindString(4, entity.getEnglish_name());
        stmt.bindString(5, entity.getNick());
        stmt.bindString(6, entity.getWord_name());
        stmt.bindString(7, entity.getNumber_name());
        stmt.bindString(8, entity.getNet_name());
        stmt.bindString(9, entity.getPinying_name());
        stmt.bindString(10, entity.getPinying_first_name());
        stmt.bindString(11, entity.getPinying_nick());
        stmt.bindString(12, entity.getUsername_text1());
        stmt.bindString(13, entity.getUsername_text2());
        stmt.bindString(14, entity.getStatus());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public UserNameEntity readEntity(Cursor cursor, int offset) {
        UserNameEntity entity = new UserNameEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // username_id
            cursor.getInt(offset + 1), // id
            cursor.getString(offset + 2), // value
            cursor.getString(offset + 3), // english_name
            cursor.getString(offset + 4), // nick
            cursor.getString(offset + 5), // word_name
            cursor.getString(offset + 6), // number_name
            cursor.getString(offset + 7), // net_name
            cursor.getString(offset + 8), // pinying_name
            cursor.getString(offset + 9), // pinying_first_name
            cursor.getString(offset + 10), // pinying_nick
            cursor.getString(offset + 11), // username_text1
            cursor.getString(offset + 12), // username_text2
            cursor.getString(offset + 13) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserNameEntity entity, int offset) {
        entity.setUsername_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getInt(offset + 1));
        entity.setValue(cursor.getString(offset + 2));
        entity.setEnglish_name(cursor.getString(offset + 3));
        entity.setNick(cursor.getString(offset + 4));
        entity.setWord_name(cursor.getString(offset + 5));
        entity.setNumber_name(cursor.getString(offset + 6));
        entity.setNet_name(cursor.getString(offset + 7));
        entity.setPinying_name(cursor.getString(offset + 8));
        entity.setPinying_first_name(cursor.getString(offset + 9));
        entity.setPinying_nick(cursor.getString(offset + 10));
        entity.setUsername_text1(cursor.getString(offset + 11));
        entity.setUsername_text2(cursor.getString(offset + 12));
        entity.setStatus(cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(UserNameEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(UserNameEntity entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
