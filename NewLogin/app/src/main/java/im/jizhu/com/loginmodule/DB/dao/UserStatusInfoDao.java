package im.jizhu.com.loginmodule.DB.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import im.jizhu.com.loginmodule.DB.entity.UserStatusEntity;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table UserStatusInfo.
 */
public class UserStatusInfoDao extends AbstractDao<UserStatusEntity, Long> {

    public static final String TABLENAME = "UserStatusInfo";

    /**
     * Properties of entity DiscoverEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property userId = new Property(1, int.class, "userId", false, "USERID");
        public final static Property userStatus = new Property(2, int.class, "userStatus", false, "USERSTATUS");
        public final static Property isOnline = new Property(3, int.class, "isOnline", false, "ISONLINE");

    }


    public UserStatusInfoDao(DaoConfig config) {
        super(config);
    }

    public UserStatusInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'UserStatusInfo' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'USERID' INTEGER  NOT NULL ," + // 0: userId
                "'USERSTATUS' INTEGER NOT NULL ," + // 1: userStatus
                "'ISONLINE' INTEGER NOT NULL );");  // 2: isOnline

        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_UserStatusInfo__USERID ON UserStatusInfo" +
                " (USERID);");
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'UserStatusInfo'";
        db.execSQL(sql);
    }

   /* *//**
     * 插入或者修改发现表中的数据
     *
     * @param needDb
     *//*
    public void insertOrUpdateData(SQLiteDatabase db, List<UserStatusEntity> needDb) {
        String sql = "delete from UserStatusInfo";
        db.execSQL(sql);
        insertInTx(needDb);
    }*/

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserStatusEntity entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getUserStatus());
        stmt.bindLong(4, entity.getIsOnline());

    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public UserStatusEntity readEntity(Cursor cursor, int offset) {
        UserStatusEntity entity = new UserStatusEntity( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getInt(offset + 1),
                cursor.getInt(offset + 2), // UserStatus
                cursor.getInt(offset + 3)  // IsOnline

        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, UserStatusEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getInt(offset + 1));
        entity.setUserStatus(cursor.getInt(offset + 2));
        entity.setIsOnline(cursor.getInt(offset + 3));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(UserStatusEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * 修改在离线状态值
     * @param UserStatusentityList
     *//*
    public static void updateUserStatus(SQLiteDatabase db,List<UserStatusEntity> UserStatusentityList) {
        if (UserStatusentityList.size() <= 0) {
            return;
        }
        ContentValues contentValues=new ContentValues();
        for (int i =0 ; i<UserStatusentityList.size();i++){
            contentValues.put("USERSTATUS", UserStatusentityList.get(i).getUserStatus());
            contentValues.put("ISONLINE", UserStatusentityList.get(i).getIsOnline());
            db.update(TABLENAME,contentValues,"USERID=?",new String[]{UserStatusentityList.get(i).getUserId()+""});
        }
        db.close();
    }*/

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(UserStatusEntity entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
