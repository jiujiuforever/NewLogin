package im.jizhu.com.loginmodule.DB.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import im.jizhu.com.loginmodule.DB.entity.UserInfoEntity;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table UserInfo.
*/
public class UserInfoDao extends AbstractDao<UserInfoEntity, Long> {

    public static final String TABLENAME = "UserInfo";

    /**
     * Properties of entity UserInfoEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Userinfo_id = new Property(0, Long.class, "userinfo_id", true, "USERINFO_ID");
        public final static Property Guid = new Property(1, String.class, "guid", false, "GUID");
        public final static Property Id = new Property(2, int.class, "id", false, "ID");
        public final static Property Container_id = new Property(3, int.class, "container_id", false, "CONTAINER_ID");
        public final static Property Name = new Property(4, int.class, "name", false, "NAME");
        public final static Property Avatar = new Property(5, String.class, "avatar", false, "AVATAR");
        public final static Property Attach = new Property(6, int.class, "attach", false, "ATTACH");
        public final static Property Depart = new Property(7, String.class, "depart", false, "DEPART");
        public final static Property Uservalue_list = new Property(8, String.class, "uservalue_list", false, "USERVALUE_LIST");
        public final static Property Userinfo_text1 = new Property(9, String.class, "userinfo_text1", false, "USERINFO_TEXT1");
        public final static Property Userinfo_text2 = new Property(10, String.class, "userinfo_text2", false, "USERINFO_TEXT2");
        public final static Property Userinfo_text3 = new Property(11, String.class, "userinfo_text3", false, "USERINFO_TEXT3");
        public final static Property Status = new Property(12, String.class, "status", false, "STATUS");
    };


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'UserInfo' (" + //
                "'USERINFO_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: userinfo_id
                "'GUID' TEXT NOT NULL ," + // 1: guid
                "'ID' INTEGER NOT NULL ," + // 2: id
                "'CONTAINER_ID' INTEGER NOT NULL ," + // 3: container_id
                "'NAME' INTEGER NOT NULL ," + // 4: name
                "'AVATAR' TEXT NOT NULL ," + // 5: avatar
                "'ATTACH' INTEGER NOT NULL ," + // 6: attach
                "'DEPART' TEXT NOT NULL ," + // 7: depart
                "'USERVALUE_LIST' TEXT NOT NULL ," + // 8: uservalue_list
                "'USERINFO_TEXT1' TEXT NOT NULL ," + // 9: userinfo_text1
                "'USERINFO_TEXT2' TEXT NOT NULL ," + // 10: userinfo_text2
                "'USERINFO_TEXT3' TEXT NOT NULL ," + // 11: userinfo_text3
                "'STATUS' TEXT NOT NULL );"); // 12: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'UserInfo'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserInfoEntity entity) {
        stmt.clearBindings();
 
        Long userinfo_id = entity.getUserinfo_id();
        if (userinfo_id != null) {
            stmt.bindLong(1, userinfo_id);
        }
        stmt.bindString(2, entity.getGuid());
        stmt.bindLong(3, entity.getId());
        stmt.bindLong(4, entity.getContainer_id());
        stmt.bindLong(5, entity.getName());
        stmt.bindString(6, entity.getAvatar());
        stmt.bindLong(7, entity.getAttach());
        stmt.bindString(8, entity.getDepart());
        stmt.bindString(9, entity.getUservalue_list());
        stmt.bindString(10, entity.getUserinfo_text1());
        stmt.bindString(11, entity.getUserinfo_text2());
        stmt.bindString(12, entity.getUserinfo_text3());
        stmt.bindString(13, entity.getStatus());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserInfoEntity readEntity(Cursor cursor, int offset) {
        UserInfoEntity entity = new UserInfoEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // userinfo_id
            cursor.getString(offset + 1), // guid
            cursor.getInt(offset + 2), // id
            cursor.getInt(offset + 3), // container_id
            cursor.getInt(offset + 4), // name
            cursor.getString(offset + 5), // avatar
            cursor.getInt(offset + 6), // attach
            cursor.getString(offset + 7), // depart
            cursor.getString(offset + 8), // uservalue_list
            cursor.getString(offset + 9), // userinfo_text1
            cursor.getString(offset + 10), // userinfo_text2
            cursor.getString(offset + 11), // userinfo_text3
            cursor.getString(offset + 12) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserInfoEntity entity, int offset) {
        entity.setUserinfo_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGuid(cursor.getString(offset + 1));
        entity.setId(cursor.getInt(offset + 2));
        entity.setContainer_id(cursor.getInt(offset + 3));
        entity.setName(cursor.getInt(offset + 4));
        entity.setAvatar(cursor.getString(offset + 5));
        entity.setAttach(cursor.getInt(offset + 6));
        entity.setDepart(cursor.getString(offset + 7));
        entity.setUservalue_list(cursor.getString(offset + 8));
        entity.setUserinfo_text1(cursor.getString(offset + 9));
        entity.setUserinfo_text2(cursor.getString(offset + 10));
        entity.setUserinfo_text3(cursor.getString(offset + 11));
        entity.setStatus(cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserInfoEntity entity, long rowId) {
        entity.setUserinfo_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserInfoEntity entity) {
        if(entity != null) {
            return entity.getUserinfo_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
