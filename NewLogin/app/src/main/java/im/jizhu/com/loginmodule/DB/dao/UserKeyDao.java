package im.jizhu.com.loginmodule.DB.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import im.jizhu.com.loginmodule.DB.entity.UserKeyEntity;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table UserKey.
*/
public class UserKeyDao extends AbstractDao<UserKeyEntity, Void> {

    public static final String TABLENAME = "UserKey";

    /**
     * Properties of entity UserKeyEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Userkey_id = new Property(0, Long.class, "userkey_id", true, "USERKEY_ID");
        public final static Property Id = new Property(1, Integer.class, "id", true, "ID");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property Key = new Property(3, String.class, "key", false, "KEY");
        public final static Property Defualt_value = new Property(4, String.class, "defualt_value", false, "DEFUALT_VALUE");
        public final static Property Desc = new Property(5, String.class, "desc", false, "DESC");
        public final static Property Userkey_text1 = new Property(6, String.class, "userkey_text1", false, "USERKEY_TEXT1");
        public final static Property Userkey_text2 = new Property(7, String.class, "userkey_text2", false, "USERKEY_TEXT2");
        public final static Property Status = new Property(8, String.class, "status", false, "STATUS");
    };


    public UserKeyDao(DaoConfig config) {
        super(config);
    }
    
    public UserKeyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'UserKey' (" + //
                "'USERKEY_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: userkey_id
                "'ID' INTEGER PRIMARY KEY ," + // 1: id
                "'TYPE' INTEGER NOT NULL ," + // 2: type
                "'KEY' TEXT NOT NULL ," + // 3: key
                "'DEFUALT_VALUE' TEXT NOT NULL ," + // 4: defualt_value
                "'DESC' TEXT NOT NULL ," + // 5: desc
                "'USERKEY_TEXT1' TEXT NOT NULL ," + // 6: userkey_text1
                "'USERKEY_TEXT2' TEXT NOT NULL ," + // 7: userkey_text2
                "'STATUS' TEXT NOT NULL );"); // 8: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'UserKey'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserKeyEntity entity) {
        stmt.clearBindings();
 
        Long userkey_id = entity.getUserkey_id();
        if (userkey_id != null) {
            stmt.bindLong(1, userkey_id);
        }
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
        stmt.bindLong(3, entity.getType());
        stmt.bindString(4, entity.getKey());
        stmt.bindString(5, entity.getDefualt_value());
        stmt.bindString(6, entity.getDesc());
        stmt.bindString(7, entity.getUserkey_text1());
        stmt.bindString(8, entity.getUserkey_text2());
        stmt.bindString(9, entity.getStatus());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public UserKeyEntity readEntity(Cursor cursor, int offset) {
        UserKeyEntity entity = new UserKeyEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // userkey_id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // id
            cursor.getInt(offset + 2), // type
            cursor.getString(offset + 3), // key
            cursor.getString(offset + 4), // defualt_value
            cursor.getString(offset + 5), // desc
            cursor.getString(offset + 6), // userkey_text1
            cursor.getString(offset + 7), // userkey_text2
            cursor.getString(offset + 8) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserKeyEntity entity, int offset) {
        entity.setUserkey_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setKey(cursor.getString(offset + 3));
        entity.setDefualt_value(cursor.getString(offset + 4));
        entity.setDesc(cursor.getString(offset + 5));
        entity.setUserkey_text1(cursor.getString(offset + 6));
        entity.setUserkey_text2(cursor.getString(offset + 7));
        entity.setStatus(cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(UserKeyEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(UserKeyEntity entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
