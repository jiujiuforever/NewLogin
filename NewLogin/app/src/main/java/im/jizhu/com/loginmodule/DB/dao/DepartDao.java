package im.jizhu.com.loginmodule.DB.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import im.jizhu.com.loginmodule.DB.entity.DepartEntity;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table Depart.
*/
public class DepartDao extends AbstractDao<DepartEntity, Void> {

    public static final String TABLENAME = "Depart";

    /**
     * Properties of entity DepartEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Depart_id = new Property(0, Long.class, "depart_id", true, "DEPART_ID");
        public final static Property Guid = new Property(1, String.class, "guid", true, "GUID");
        public final static Property Container_id = new Property(2, int.class, "container_id", false, "CONTAINER_ID");
        public final static Property Id = new Property(3, int.class, "id", false, "ID");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Pid = new Property(5, int.class, "pid", false, "PID");
        public final static Property Sort = new Property(6, int.class, "sort", false, "SORT");
        public final static Property Depart_text1 = new Property(7, String.class, "depart_text1", false, "DEPART_TEXT1");
        public final static Property Depart_text2 = new Property(8, String.class, "depart_text2", false, "DEPART_TEXT2");
        public final static Property Depart_text3 = new Property(9, String.class, "depart_text3", false, "DEPART_TEXT3");
        public final static Property Status = new Property(10, String.class, "status", false, "STATUS");
    };


    public DepartDao(DaoConfig config) {
        super(config);
    }
    
    public DepartDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Depart' (" + //
                "'DEPART_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: depart_id
                "'GUID' TEXT PRIMARY KEY NOT NULL ," + // 1: guid
                "'CONTAINER_ID' INTEGER NOT NULL ," + // 2: container_id
                "'ID' INTEGER NOT NULL ," + // 3: id
                "'NAME' TEXT NOT NULL ," + // 4: name
                "'PID' INTEGER NOT NULL ," + // 5: pid
                "'SORT' INTEGER NOT NULL ," + // 6: sort
                "'DEPART_TEXT1' TEXT NOT NULL ," + // 7: depart_text1
                "'DEPART_TEXT2' TEXT NOT NULL ," + // 8: depart_text2
                "'DEPART_TEXT3' TEXT NOT NULL ," + // 9: depart_text3
                "'STATUS' TEXT NOT NULL );"); // 10: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Depart'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DepartEntity entity) {
        stmt.clearBindings();
 
        Long depart_id = entity.getDepart_id();
        if (depart_id != null) {
            stmt.bindLong(1, depart_id);
        }
        stmt.bindString(2, entity.getGuid());
        stmt.bindLong(3, entity.getContainer_id());
        stmt.bindLong(4, entity.getId());
        stmt.bindString(5, entity.getName());
        stmt.bindLong(6, entity.getPid());
        stmt.bindLong(7, entity.getSort());
        stmt.bindString(8, entity.getDepart_text1());
        stmt.bindString(9, entity.getDepart_text2());
        stmt.bindString(10, entity.getDepart_text3());
        stmt.bindString(11, entity.getStatus());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public DepartEntity readEntity(Cursor cursor, int offset) {
        DepartEntity entity = new DepartEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // depart_id
            cursor.getString(offset + 1), // guid
            cursor.getInt(offset + 2), // container_id
            cursor.getInt(offset + 3), // id
            cursor.getString(offset + 4), // name
            cursor.getInt(offset + 5), // pid
            cursor.getInt(offset + 6), // sort
            cursor.getString(offset + 7), // depart_text1
            cursor.getString(offset + 8), // depart_text2
            cursor.getString(offset + 9), // depart_text3
            cursor.getString(offset + 10) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DepartEntity entity, int offset) {
        entity.setDepart_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGuid(cursor.getString(offset + 1));
        entity.setContainer_id(cursor.getInt(offset + 2));
        entity.setId(cursor.getInt(offset + 3));
        entity.setName(cursor.getString(offset + 4));
        entity.setPid(cursor.getInt(offset + 5));
        entity.setSort(cursor.getInt(offset + 6));
        entity.setDepart_text1(cursor.getString(offset + 7));
        entity.setDepart_text2(cursor.getString(offset + 8));
        entity.setDepart_text3(cursor.getString(offset + 9));
        entity.setStatus(cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(DepartEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(DepartEntity entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
