package im.jizhu.com.loginmodule.DB.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import im.jizhu.com.loginmodule.DB.entity.UserValueEntity;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table UserValue.
*/
public class UserValueDao extends AbstractDao<UserValueEntity, Void> {

    public static final String TABLENAME = "UserValue";

    /**
     * Properties of entity UserValueEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uservalue_id = new Property(0, Long.class, "uservalue_id", true, "USERVALUE_ID");
        public final static Property Guid = new Property(1, String.class, "guid", true, "GUID");
        public final static Property Key = new Property(2, int.class, "key", false, "KEY");
        public final static Property Value = new Property(3, String.class, "value", false, "VALUE");
        public final static Property Uservalue_text1 = new Property(4, String.class, "uservalue_text1", false, "USERVALUE_TEXT1");
        public final static Property Uservalue_text2 = new Property(5, String.class, "uservalue_text2", false, "USERVALUE_TEXT2");
        public final static Property Status = new Property(6, String.class, "status", false, "STATUS");
    };


    public UserValueDao(DaoConfig config) {
        super(config);
    }
    
    public UserValueDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'UserValue' (" + //
                "'USERVALUE_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: uservalue_id
                "'GUID' TEXT PRIMARY KEY NOT NULL ," + // 1: guid
                "'KEY' INTEGER NOT NULL ," + // 2: key
                "'VALUE' TEXT NOT NULL ," + // 3: value
                "'USERVALUE_TEXT1' TEXT NOT NULL ," + // 4: uservalue_text1
                "'USERVALUE_TEXT2' TEXT NOT NULL ," + // 5: uservalue_text2
                "'STATUS' TEXT NOT NULL );"); // 6: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'UserValue'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserValueEntity entity) {
        stmt.clearBindings();
 
        Long uservalue_id = entity.getUservalue_id();
        if (uservalue_id != null) {
            stmt.bindLong(1, uservalue_id);
        }
        stmt.bindString(2, entity.getGuid());
        stmt.bindLong(3, entity.getKey());
        stmt.bindString(4, entity.getValue());
        stmt.bindString(5, entity.getUservalue_text1());
        stmt.bindString(6, entity.getUservalue_text2());
        stmt.bindString(7, entity.getStatus());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public UserValueEntity readEntity(Cursor cursor, int offset) {
        UserValueEntity entity = new UserValueEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // uservalue_id
            cursor.getString(offset + 1), // guid
            cursor.getInt(offset + 2), // key
            cursor.getString(offset + 3), // value
            cursor.getString(offset + 4), // uservalue_text1
            cursor.getString(offset + 5), // uservalue_text2
            cursor.getString(offset + 6) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserValueEntity entity, int offset) {
        entity.setUservalue_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGuid(cursor.getString(offset + 1));
        entity.setKey(cursor.getInt(offset + 2));
        entity.setValue(cursor.getString(offset + 3));
        entity.setUservalue_text1(cursor.getString(offset + 4));
        entity.setUservalue_text2(cursor.getString(offset + 5));
        entity.setStatus(cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(UserValueEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(UserValueEntity entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
