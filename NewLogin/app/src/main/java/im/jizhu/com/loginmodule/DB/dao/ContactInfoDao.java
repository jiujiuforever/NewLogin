package im.jizhu.com.loginmodule.DB.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import im.jizhu.com.loginmodule.DB.entity.ContactEntity;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table ContactInfo.
*/
public class ContactInfoDao extends AbstractDao<ContactEntity, Long> {

    public static final String TABLENAME = "ContactInfo";

    /**
     * Properties of entity ContactEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ContactId = new Property(1, int.class, "contactId", false, "CONTACT_ID");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property RealName = new Property(4, String.class, "realName", false, "REAL_NAME");
        public final static Property Avatar = new Property(5, String.class, "avatar", false, "AVATAR");

    };


    public ContactInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ContactInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ContactInfo' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'CONTACT_ID' INTEGER NOT NULL ," + // 1: contactId
                "'TYPE' INTEGER NOT NULL ," + // 2: type
                "'NAME' TEXT NOT NULL ," + // 3: name
                "'REAL_NAME' TEXT NOT NULL ," + // 4: realName
                "'AVATAR' TEXT NOT NULL );"); // 5: avatar
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_ContactInfo_CONTACT_ID ON ContactInfo" +
                " (CONTACT_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ContactInfo'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ContactEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getContactId());
        stmt.bindLong(3, entity.getType());
        stmt.bindString(4, entity.getName());
        stmt.bindString(5, entity.getRealName());
        stmt.bindString(6, entity.getAvatar());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ContactEntity readEntity(Cursor cursor, int offset) {
        ContactEntity entity = new ContactEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // contactId
            cursor.getInt(offset + 2), // type
            cursor.getString(offset + 3), // name
            cursor.getString(offset + 4), // realName
            cursor.getString(offset + 5), // avatar
            cursor .getInt(offset+6),       //userStatus
            cursor .getInt(offset+7),       //isOnline
            cursor.getInt(offset+8)         //gender
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ContactEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContactId(cursor.getInt(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setName(cursor.getString(offset + 3));
        entity.setRealName(cursor.getString(offset + 4));
        entity.setAvatar(cursor.getString(offset + 5));
        entity.setGender(cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ContactEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ContactEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
